using System;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Threading.Tasks;
using System.Windows;

namespace graWZycie
{
    public class Board : Form1
    {
        public int getSize()
        {
            return SIZE;
        }
        public int getRectSize()
        {
            return rectSize;
        }

        public string getboardString()
        {
            return boardString;
        }
        static string boardString = "";
        static int SIZE = 100;
        static int rectSize = 9;

        public void changeBoardSize(int size)
        {
            SIZE = size;
            rectSize = 900 / size;
        }

        private Rectangle[,] cells = new Rectangle[SIZE, SIZE];
        private Holder[,] holders = new Holder[SIZE, SIZE];

        private const int alive = 1;
        private const int dead = 0;

        public void initBoard()
        {
            Console.WriteLine(SIZE +"   to   " + rectSize);
            for (int x = 0; x < SIZE; x++)
            {
                for (int y = 0; y < SIZE; y++)
                {
                    cells[x, y] = new Rectangle(y * rectSize + 1, x * rectSize + 1, rectSize-1, rectSize-1);
                    holders[x, y] = new Holder();
                    holders[x, y].setValue(dead);               
                }
            }
        }

        /*
        public void initSavedBoard()
        {
            for (int x = 0; x < dane.SIZE; x++)
            {
                for (int y = 0; y < dane.SIZE; y++)
                {
                    cells[x, y] = new Rectangle(y * dane.rectSize + 1, x * dane.rectSize + 1, dane.rectSize - 1, dane.rectSize - 1);
                    holders[x, y] = new Holder();
                    holders[x, y].setValue(alive);

                }
            }

            for (int x = 1; x < dane.SIZE - 1; x++)
            {
                for (int y = 1; y < dane.SIZE - 1; y++)
                {
                    if (holders[x, y].getValue() == alive)
                    {
                        GFX.drawRect1(cells[y, x]);
                        holders[x, y].setValue(alive);
                    }
                    else if (holders[x, y].getValue() == dead)
                    {
                        GFX.drawRect2(cells[y, x]);
                        holders[x, y].setValue(dead);
                    }
                }
            }
            
        }
        */
        public void detectHit(Point loc)
        {

            int locX = loc.X / (900 / SIZE);
            int locY = loc.Y / (900 / SIZE);
            //MessageBox.Show(locX.ToString() + ", " + locY.ToString());
            if (holders[locX, locY].getValue() == dead)
            {
                GFX.drawRect1(cells[locY, locX]);
                holders[locX, locY].setValue(alive);
            }
            else if(holders[locX, locY].getValue() == alive)
            {
                GFX.drawRect2(cells[locY, locX]);
                holders[locX, locY].setValue(dead);
            }

        }

        //zliczanie sąsiadów dla komórki
        public int numOfNeighbors(int xx, int yy)
        {
            int sum;
            sum = holders[xx - 1, yy - 1].getValue() + holders[xx, yy - 1].getValue() +
                holders[xx + 1, yy - 1].getValue() + holders[xx - 1, yy].getValue() + 
                holders[xx + 1, yy].getValue() + holders[xx - 1, yy + 1].getValue() + 
                holders[xx, yy + 1].getValue() + holders[xx + 1, yy + 1].getValue();

            return sum;
        }

        public void rBoard()
        {
            //zmodyfikowane stany komorek
            int[,] tempgBoard = new int[SIZE, SIZE];
            int x, y, state, qNeighbors;
            boardString = "";
            for (x = 1; x < SIZE - 1; x++)
            {
                for (y = 1; y < SIZE - 1; y++)
                {
                    state = holders[x, y].getValue();
                    qNeighbors = numOfNeighbors(x, y);
                    if (state == 1)
                    {
                        if (qNeighbors < 2 || qNeighbors > 3) state = 0;
                    }
                    else
                    {
                        if (qNeighbors <= 3 && qNeighbors >= 3) state = 1;
                    }
                    tempgBoard[x, y] = state;
                    boardString += state.ToString();
                    //Console.Write(boardString);
                }
                //Console.WriteLine();
            }

            for (x = 1; x < SIZE - 1; x++)
            {
                for (y = 1; y < SIZE - 1; y++)
                {
                    if (holders[x, y].getValue() != tempgBoard[x,y] && tempgBoard[x, y] == alive)
                    {
                        GFX.drawRect1(cells[y, x]);
                        holders[x, y].setValue(alive);
                    }
                    else if (holders[x, y].getValue() != tempgBoard[x, y] && tempgBoard[x, y] == dead)
                    {
                        GFX.drawRect2(cells[y, x]);
                        holders[x, y].setValue(dead);
                    }
                }
            }
        }



        public void randAlive()
        {
            Random rand = new Random();
            for (int x = 1; x < SIZE - 1; x++)
            {
                for (int y = 1; y < SIZE - 1; y++)
                {
                    if(rand.Next(0,10) == 1)
                    {
                        GFX.drawRect1(cells[y, x]);
                        holders[x, y].setValue(alive);
                    }
                }
            }
        }

        public void clean()
        {
            for (int x = 1; x < dane.boardSize - 1; x++)
            {
                for (int y = 1; y < dane.boardSize - 1; y++)
                {
                    if (holders[x, y].getValue() == alive)
                    {
                        GFX.drawRect2(cells[y, x]);
                        holders[x, y].setValue(dead);
                    }
                }
            }
        }
    }

    class Holder
    {
        private int value = 0;
        public void setValue(int i)
        {
            value = i;
        }
        public int getValue()
        {
            return value;
        }
    }
}
